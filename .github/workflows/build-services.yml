name: Build Services

on:
  push:
    branches:
      - master

permissions: write-all

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install and Build ðŸ”§ # This example project is built using npm and outputs the result to the 'dist' folder
        run: |
          npm --prefix ./src/services/* install
          npm --prefix ./src/services/* run build

  terraform:
    needs: build
    name: "Terraform"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Delete current release branch
        uses: dawidd6/action-delete-branch@v3
        with:
          github_token: ${{github.token}}
          branches: release

      - name: Create Release branch
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: release # The branch the action should deploy to.
          folder: . # The folder the action should deploy.

      - name: Checkout Release branch
        uses: actions/checkout@v3
        with:
          ref: release
          path: release

      - name: Get next version
        uses: reecetech/version-increment@2023.9.3
        id: version
        with:
          scheme: calver
          increment: patch

      - name: Create release
        uses: "actions/github-script@v6"
        env:
          VERSION: ${{ steps.version.outputs.version }}
        with:
          github-token: "${{ github.token }}"
          script: |
            try {
              const response = await github.rest.repos.createRelease({
                draft: false,
                generate_release_notes: true,
                name: process.env.VERSION,
                owner: context.repo.owner,
                prerelease: false,
                repo: context.repo.repo,
                tag_name: process.env.VERSION,
                target_commitish: 'release'
              });
              core.exportVariable('RELEASE_ID', response.data.id);
              core.exportVariable('RELEASE_UPLOAD_URL', response.data.upload_url);
            } catch (error) {
              core.setFailed(error.message);
            }

      - name: Create Apply Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.1.1
        id: apply-run
        if: success() || failure()
        with:
          workspace: ${{ vars.TFE_WORKSPACE }}
          organization: ${{ vars.TF_ORGANIZATION }}
          token: ${{ secrets.TFE_TOKEN }}
